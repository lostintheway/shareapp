// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/portfolio"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/transaction"
)

// Transaction is the model entity for the Transaction schema.
type Transaction struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"oid,omitempty"`
	// ShareName holds the value of the "shareName" field.
	ShareName string `json:"shareName,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// Price holds the value of the "price" field.
	Price int `json:"price,omitempty"`
	// TransType holds the value of the "trans_type" field.
	TransType string `json:"trans_type,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TransactionQuery when eager-loading is set.
	Edges                  TransactionEdges `json:"edges"`
	portfolio_transactions *int
}

// TransactionEdges holds the relations/edges for other nodes in the graph.
type TransactionEdges struct {
	// PfID holds the value of the pf_id edge.
	PfID *Portfolio `json:"pf_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PfIDOrErr returns the PfID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TransactionEdges) PfIDOrErr() (*Portfolio, error) {
	if e.loadedTypes[0] {
		if e.PfID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: portfolio.Label}
		}
		return e.PfID, nil
	}
	return nil, &NotLoadedError{edge: "pf_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Transaction) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID, transaction.FieldQuantity, transaction.FieldPrice:
			values[i] = new(sql.NullInt64)
		case transaction.FieldShareName, transaction.FieldTransType:
			values[i] = new(sql.NullString)
		case transaction.FieldDate, transaction.FieldCreatedAt, transaction.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case transaction.ForeignKeys[0]: // portfolio_transactions
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Transaction", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Transaction fields.
func (t *Transaction) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case transaction.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case transaction.FieldShareName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field shareName", values[i])
			} else if value.Valid {
				t.ShareName = value.String
			}
		case transaction.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				t.Date = value.Time
			}
		case transaction.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				t.Quantity = int(value.Int64)
			}
		case transaction.FieldPrice:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field price", values[i])
			} else if value.Valid {
				t.Price = int(value.Int64)
			}
		case transaction.FieldTransType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trans_type", values[i])
			} else if value.Valid {
				t.TransType = value.String
			}
		case transaction.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case transaction.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case transaction.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field portfolio_transactions", value)
			} else if value.Valid {
				t.portfolio_transactions = new(int)
				*t.portfolio_transactions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryPfID queries the "pf_id" edge of the Transaction entity.
func (t *Transaction) QueryPfID() *PortfolioQuery {
	return (&TransactionClient{config: t.config}).QueryPfID(t)
}

// Update returns a builder for updating this Transaction.
// Note that you need to call Transaction.Unwrap() before calling this method if this Transaction
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Transaction) Update() *TransactionUpdateOne {
	return (&TransactionClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Transaction entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Transaction) Unwrap() *Transaction {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Transaction is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Transaction) String() string {
	var builder strings.Builder
	builder.WriteString("Transaction(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("shareName=")
	builder.WriteString(t.ShareName)
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(t.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", t.Quantity))
	builder.WriteString(", ")
	builder.WriteString("price=")
	builder.WriteString(fmt.Sprintf("%v", t.Price))
	builder.WriteString(", ")
	builder.WriteString("trans_type=")
	builder.WriteString(t.TransType)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Transactions is a parsable slice of Transaction.
type Transactions []*Transaction

func (t Transactions) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
