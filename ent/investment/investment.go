// Code generated by ent, DO NOT EDIT.

package investment

import (
	"time"
)

const (
	// Label holds the string label denoting the investment type in the database.
	Label = "investment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRelation holds the string denoting the relation field in the database.
	FieldRelation = "relation"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldAmount holds the string denoting the amount field in the database.
	FieldAmount = "amount"
	// FieldPaymentMethod holds the string denoting the payment_method field in the database.
	FieldPaymentMethod = "payment_method"
	// FieldRemarks holds the string denoting the remarks field in the database.
	FieldRemarks = "remarks"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeInvestmentID holds the string denoting the investment_id edge name in mutations.
	EdgeInvestmentID = "investment_id"
	// Table holds the table name of the investment in the database.
	Table = "investments"
	// InvestmentIDTable is the table that holds the investment_id relation/edge.
	InvestmentIDTable = "investments"
	// InvestmentIDInverseTable is the table name for the Portfolio entity.
	// It exists in this package in order to avoid circular dependency with the "portfolio" package.
	InvestmentIDInverseTable = "portfolios"
	// InvestmentIDColumn is the table column denoting the investment_id relation/edge.
	InvestmentIDColumn = "portfolio_investments"
)

// Columns holds all SQL columns for investment fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldName,
	FieldRelation,
	FieldDate,
	FieldAmount,
	FieldPaymentMethod,
	FieldRemarks,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "investments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"portfolio_investments",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)
