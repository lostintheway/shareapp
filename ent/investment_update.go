// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/investment"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/portfolio"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/predicate"
)

// InvestmentUpdate is the builder for updating Investment entities.
type InvestmentUpdate struct {
	config
	hooks    []Hook
	mutation *InvestmentMutation
}

// Where appends a list predicates to the InvestmentUpdate builder.
func (iu *InvestmentUpdate) Where(ps ...predicate.Investment) *InvestmentUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUserID sets the "user_id" field.
func (iu *InvestmentUpdate) SetUserID(i int64) *InvestmentUpdate {
	iu.mutation.ResetUserID()
	iu.mutation.SetUserID(i)
	return iu
}

// AddUserID adds i to the "user_id" field.
func (iu *InvestmentUpdate) AddUserID(i int64) *InvestmentUpdate {
	iu.mutation.AddUserID(i)
	return iu
}

// SetName sets the "name" field.
func (iu *InvestmentUpdate) SetName(s string) *InvestmentUpdate {
	iu.mutation.SetName(s)
	return iu
}

// SetRelation sets the "relation" field.
func (iu *InvestmentUpdate) SetRelation(s string) *InvestmentUpdate {
	iu.mutation.SetRelation(s)
	return iu
}

// SetDate sets the "date" field.
func (iu *InvestmentUpdate) SetDate(t time.Time) *InvestmentUpdate {
	iu.mutation.SetDate(t)
	return iu
}

// SetAmount sets the "amount" field.
func (iu *InvestmentUpdate) SetAmount(i int64) *InvestmentUpdate {
	iu.mutation.ResetAmount()
	iu.mutation.SetAmount(i)
	return iu
}

// AddAmount adds i to the "amount" field.
func (iu *InvestmentUpdate) AddAmount(i int64) *InvestmentUpdate {
	iu.mutation.AddAmount(i)
	return iu
}

// SetPaymentMethod sets the "payment_method" field.
func (iu *InvestmentUpdate) SetPaymentMethod(s string) *InvestmentUpdate {
	iu.mutation.SetPaymentMethod(s)
	return iu
}

// SetRemarks sets the "remarks" field.
func (iu *InvestmentUpdate) SetRemarks(s string) *InvestmentUpdate {
	iu.mutation.SetRemarks(s)
	return iu
}

// SetUpdatedAt sets the "updated_at" field.
func (iu *InvestmentUpdate) SetUpdatedAt(t time.Time) *InvestmentUpdate {
	iu.mutation.SetUpdatedAt(t)
	return iu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iu *InvestmentUpdate) SetNillableUpdatedAt(t *time.Time) *InvestmentUpdate {
	if t != nil {
		iu.SetUpdatedAt(*t)
	}
	return iu
}

// SetInvestmentIDID sets the "investment_id" edge to the Portfolio entity by ID.
func (iu *InvestmentUpdate) SetInvestmentIDID(id int) *InvestmentUpdate {
	iu.mutation.SetInvestmentIDID(id)
	return iu
}

// SetNillableInvestmentIDID sets the "investment_id" edge to the Portfolio entity by ID if the given value is not nil.
func (iu *InvestmentUpdate) SetNillableInvestmentIDID(id *int) *InvestmentUpdate {
	if id != nil {
		iu = iu.SetInvestmentIDID(*id)
	}
	return iu
}

// SetInvestmentID sets the "investment_id" edge to the Portfolio entity.
func (iu *InvestmentUpdate) SetInvestmentID(p *Portfolio) *InvestmentUpdate {
	return iu.SetInvestmentIDID(p.ID)
}

// Mutation returns the InvestmentMutation object of the builder.
func (iu *InvestmentUpdate) Mutation() *InvestmentMutation {
	return iu.mutation
}

// ClearInvestmentID clears the "investment_id" edge to the Portfolio entity.
func (iu *InvestmentUpdate) ClearInvestmentID() *InvestmentUpdate {
	iu.mutation.ClearInvestmentID()
	return iu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *InvestmentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *InvestmentUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *InvestmentUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *InvestmentUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iu *InvestmentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investment.Table,
			Columns: investment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: investment.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UserID(); ok {
		_spec.SetField(investment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedUserID(); ok {
		_spec.AddField(investment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.Name(); ok {
		_spec.SetField(investment.FieldName, field.TypeString, value)
	}
	if value, ok := iu.mutation.Relation(); ok {
		_spec.SetField(investment.FieldRelation, field.TypeString, value)
	}
	if value, ok := iu.mutation.Date(); ok {
		_spec.SetField(investment.FieldDate, field.TypeTime, value)
	}
	if value, ok := iu.mutation.Amount(); ok {
		_spec.SetField(investment.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.AddedAmount(); ok {
		_spec.AddField(investment.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iu.mutation.PaymentMethod(); ok {
		_spec.SetField(investment.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := iu.mutation.Remarks(); ok {
		_spec.SetField(investment.FieldRemarks, field.TypeString, value)
	}
	if value, ok := iu.mutation.UpdatedAt(); ok {
		_spec.SetField(investment.FieldUpdatedAt, field.TypeTime, value)
	}
	if iu.mutation.InvestmentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investment.InvestmentIDTable,
			Columns: []string{investment.InvestmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portfolio.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iu.mutation.InvestmentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investment.InvestmentIDTable,
			Columns: []string{investment.InvestmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portfolio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// InvestmentUpdateOne is the builder for updating a single Investment entity.
type InvestmentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InvestmentMutation
}

// SetUserID sets the "user_id" field.
func (iuo *InvestmentUpdateOne) SetUserID(i int64) *InvestmentUpdateOne {
	iuo.mutation.ResetUserID()
	iuo.mutation.SetUserID(i)
	return iuo
}

// AddUserID adds i to the "user_id" field.
func (iuo *InvestmentUpdateOne) AddUserID(i int64) *InvestmentUpdateOne {
	iuo.mutation.AddUserID(i)
	return iuo
}

// SetName sets the "name" field.
func (iuo *InvestmentUpdateOne) SetName(s string) *InvestmentUpdateOne {
	iuo.mutation.SetName(s)
	return iuo
}

// SetRelation sets the "relation" field.
func (iuo *InvestmentUpdateOne) SetRelation(s string) *InvestmentUpdateOne {
	iuo.mutation.SetRelation(s)
	return iuo
}

// SetDate sets the "date" field.
func (iuo *InvestmentUpdateOne) SetDate(t time.Time) *InvestmentUpdateOne {
	iuo.mutation.SetDate(t)
	return iuo
}

// SetAmount sets the "amount" field.
func (iuo *InvestmentUpdateOne) SetAmount(i int64) *InvestmentUpdateOne {
	iuo.mutation.ResetAmount()
	iuo.mutation.SetAmount(i)
	return iuo
}

// AddAmount adds i to the "amount" field.
func (iuo *InvestmentUpdateOne) AddAmount(i int64) *InvestmentUpdateOne {
	iuo.mutation.AddAmount(i)
	return iuo
}

// SetPaymentMethod sets the "payment_method" field.
func (iuo *InvestmentUpdateOne) SetPaymentMethod(s string) *InvestmentUpdateOne {
	iuo.mutation.SetPaymentMethod(s)
	return iuo
}

// SetRemarks sets the "remarks" field.
func (iuo *InvestmentUpdateOne) SetRemarks(s string) *InvestmentUpdateOne {
	iuo.mutation.SetRemarks(s)
	return iuo
}

// SetUpdatedAt sets the "updated_at" field.
func (iuo *InvestmentUpdateOne) SetUpdatedAt(t time.Time) *InvestmentUpdateOne {
	iuo.mutation.SetUpdatedAt(t)
	return iuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (iuo *InvestmentUpdateOne) SetNillableUpdatedAt(t *time.Time) *InvestmentUpdateOne {
	if t != nil {
		iuo.SetUpdatedAt(*t)
	}
	return iuo
}

// SetInvestmentIDID sets the "investment_id" edge to the Portfolio entity by ID.
func (iuo *InvestmentUpdateOne) SetInvestmentIDID(id int) *InvestmentUpdateOne {
	iuo.mutation.SetInvestmentIDID(id)
	return iuo
}

// SetNillableInvestmentIDID sets the "investment_id" edge to the Portfolio entity by ID if the given value is not nil.
func (iuo *InvestmentUpdateOne) SetNillableInvestmentIDID(id *int) *InvestmentUpdateOne {
	if id != nil {
		iuo = iuo.SetInvestmentIDID(*id)
	}
	return iuo
}

// SetInvestmentID sets the "investment_id" edge to the Portfolio entity.
func (iuo *InvestmentUpdateOne) SetInvestmentID(p *Portfolio) *InvestmentUpdateOne {
	return iuo.SetInvestmentIDID(p.ID)
}

// Mutation returns the InvestmentMutation object of the builder.
func (iuo *InvestmentUpdateOne) Mutation() *InvestmentMutation {
	return iuo.mutation
}

// ClearInvestmentID clears the "investment_id" edge to the Portfolio entity.
func (iuo *InvestmentUpdateOne) ClearInvestmentID() *InvestmentUpdateOne {
	iuo.mutation.ClearInvestmentID()
	return iuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *InvestmentUpdateOne) Select(field string, fields ...string) *InvestmentUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Investment entity.
func (iuo *InvestmentUpdateOne) Save(ctx context.Context) (*Investment, error) {
	var (
		err  error
		node *Investment
	)
	if len(iuo.hooks) == 0 {
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Investment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InvestmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *InvestmentUpdateOne) SaveX(ctx context.Context) *Investment {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *InvestmentUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *InvestmentUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iuo *InvestmentUpdateOne) sqlSave(ctx context.Context) (_node *Investment, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   investment.Table,
			Columns: investment.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: investment.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Investment.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, investment.FieldID)
		for _, f := range fields {
			if !investment.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != investment.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UserID(); ok {
		_spec.SetField(investment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedUserID(); ok {
		_spec.AddField(investment.FieldUserID, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.Name(); ok {
		_spec.SetField(investment.FieldName, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Relation(); ok {
		_spec.SetField(investment.FieldRelation, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Date(); ok {
		_spec.SetField(investment.FieldDate, field.TypeTime, value)
	}
	if value, ok := iuo.mutation.Amount(); ok {
		_spec.SetField(investment.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.AddedAmount(); ok {
		_spec.AddField(investment.FieldAmount, field.TypeInt64, value)
	}
	if value, ok := iuo.mutation.PaymentMethod(); ok {
		_spec.SetField(investment.FieldPaymentMethod, field.TypeString, value)
	}
	if value, ok := iuo.mutation.Remarks(); ok {
		_spec.SetField(investment.FieldRemarks, field.TypeString, value)
	}
	if value, ok := iuo.mutation.UpdatedAt(); ok {
		_spec.SetField(investment.FieldUpdatedAt, field.TypeTime, value)
	}
	if iuo.mutation.InvestmentIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investment.InvestmentIDTable,
			Columns: []string{investment.InvestmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portfolio.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iuo.mutation.InvestmentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investment.InvestmentIDTable,
			Columns: []string{investment.InvestmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portfolio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Investment{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{investment.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
