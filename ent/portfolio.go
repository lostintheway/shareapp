// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/portfolio"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/user"
)

// Portfolio is the model entity for the Portfolio schema.
type Portfolio struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"oid,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// AdminName holds the value of the "admin_name" field.
	AdminName *string `json:"admin_name,omitempty"`
	// Date holds the value of the "date" field.
	Date string `json:"date,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PortfolioQuery when eager-loading is set.
	Edges           PortfolioEdges `json:"edges"`
	user_portfolios *int
}

// PortfolioEdges holds the relations/edges for other nodes in the graph.
type PortfolioEdges struct {
	// Transactions holds the value of the transactions edge.
	Transactions []*Transaction `json:"transactions,omitempty"`
	// Investments holds the value of the investments edge.
	Investments []*Investment `json:"investments,omitempty"`
	// UserID holds the value of the user_id edge.
	UserID *User `json:"user_id,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// TransactionsOrErr returns the Transactions value or an error if the edge
// was not loaded in eager-loading.
func (e PortfolioEdges) TransactionsOrErr() ([]*Transaction, error) {
	if e.loadedTypes[0] {
		return e.Transactions, nil
	}
	return nil, &NotLoadedError{edge: "transactions"}
}

// InvestmentsOrErr returns the Investments value or an error if the edge
// was not loaded in eager-loading.
func (e PortfolioEdges) InvestmentsOrErr() ([]*Investment, error) {
	if e.loadedTypes[1] {
		return e.Investments, nil
	}
	return nil, &NotLoadedError{edge: "investments"}
}

// UserIDOrErr returns the UserID value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PortfolioEdges) UserIDOrErr() (*User, error) {
	if e.loadedTypes[2] {
		if e.UserID == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.UserID, nil
	}
	return nil, &NotLoadedError{edge: "user_id"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Portfolio) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID:
			values[i] = new(sql.NullInt64)
		case portfolio.FieldName, portfolio.FieldAdminName, portfolio.FieldDate:
			values[i] = new(sql.NullString)
		case portfolio.FieldCreatedAt, portfolio.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case portfolio.ForeignKeys[0]: // user_portfolios
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Portfolio", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Portfolio fields.
func (po *Portfolio) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case portfolio.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			po.ID = int(value.Int64)
		case portfolio.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				po.Name = value.String
			}
		case portfolio.FieldAdminName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field admin_name", values[i])
			} else if value.Valid {
				po.AdminName = new(string)
				*po.AdminName = value.String
			}
		case portfolio.FieldDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				po.Date = value.String
			}
		case portfolio.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				po.CreatedAt = value.Time
			}
		case portfolio.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				po.UpdatedAt = value.Time
			}
		case portfolio.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_portfolios", value)
			} else if value.Valid {
				po.user_portfolios = new(int)
				*po.user_portfolios = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryTransactions queries the "transactions" edge of the Portfolio entity.
func (po *Portfolio) QueryTransactions() *TransactionQuery {
	return (&PortfolioClient{config: po.config}).QueryTransactions(po)
}

// QueryInvestments queries the "investments" edge of the Portfolio entity.
func (po *Portfolio) QueryInvestments() *InvestmentQuery {
	return (&PortfolioClient{config: po.config}).QueryInvestments(po)
}

// QueryUserID queries the "user_id" edge of the Portfolio entity.
func (po *Portfolio) QueryUserID() *UserQuery {
	return (&PortfolioClient{config: po.config}).QueryUserID(po)
}

// Update returns a builder for updating this Portfolio.
// Note that you need to call Portfolio.Unwrap() before calling this method if this Portfolio
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Portfolio) Update() *PortfolioUpdateOne {
	return (&PortfolioClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the Portfolio entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (po *Portfolio) Unwrap() *Portfolio {
	_tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Portfolio is not a transactional entity")
	}
	po.config.driver = _tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Portfolio) String() string {
	var builder strings.Builder
	builder.WriteString("Portfolio(")
	builder.WriteString(fmt.Sprintf("id=%v, ", po.ID))
	builder.WriteString("name=")
	builder.WriteString(po.Name)
	builder.WriteString(", ")
	if v := po.AdminName; v != nil {
		builder.WriteString("admin_name=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("date=")
	builder.WriteString(po.Date)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(po.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(po.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Portfolios is a parsable slice of Portfolio.
type Portfolios []*Portfolio

func (po Portfolios) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
