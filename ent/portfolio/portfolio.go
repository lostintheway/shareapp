// Code generated by ent, DO NOT EDIT.

package portfolio

import (
	"time"
)

const (
	// Label holds the string label denoting the portfolio type in the database.
	Label = "portfolio"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAdminName holds the string denoting the admin_name field in the database.
	FieldAdminName = "admin_name"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// EdgeInvestments holds the string denoting the investments edge name in mutations.
	EdgeInvestments = "investments"
	// EdgeUserID holds the string denoting the user_id edge name in mutations.
	EdgeUserID = "user_id"
	// Table holds the table name of the portfolio in the database.
	Table = "portfolios"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "portfolio_transactions"
	// InvestmentsTable is the table that holds the investments relation/edge.
	InvestmentsTable = "investments"
	// InvestmentsInverseTable is the table name for the Investment entity.
	// It exists in this package in order to avoid circular dependency with the "investment" package.
	InvestmentsInverseTable = "investments"
	// InvestmentsColumn is the table column denoting the investments relation/edge.
	InvestmentsColumn = "portfolio_investments"
	// UserIDTable is the table that holds the user_id relation/edge.
	UserIDTable = "portfolios"
	// UserIDInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserIDInverseTable = "users"
	// UserIDColumn is the table column denoting the user_id relation/edge.
	UserIDColumn = "user_portfolios"
)

// Columns holds all SQL columns for portfolio fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldAdminName,
	FieldDate,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "portfolios"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_portfolios",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
)
