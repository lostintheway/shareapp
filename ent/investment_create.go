// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/investment"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/portfolio"
)

// InvestmentCreate is the builder for creating a Investment entity.
type InvestmentCreate struct {
	config
	mutation *InvestmentMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (ic *InvestmentCreate) SetUserID(i int64) *InvestmentCreate {
	ic.mutation.SetUserID(i)
	return ic
}

// SetName sets the "name" field.
func (ic *InvestmentCreate) SetName(s string) *InvestmentCreate {
	ic.mutation.SetName(s)
	return ic
}

// SetRelation sets the "relation" field.
func (ic *InvestmentCreate) SetRelation(s string) *InvestmentCreate {
	ic.mutation.SetRelation(s)
	return ic
}

// SetDate sets the "date" field.
func (ic *InvestmentCreate) SetDate(t time.Time) *InvestmentCreate {
	ic.mutation.SetDate(t)
	return ic
}

// SetAmount sets the "amount" field.
func (ic *InvestmentCreate) SetAmount(i int64) *InvestmentCreate {
	ic.mutation.SetAmount(i)
	return ic
}

// SetPaymentMethod sets the "payment_method" field.
func (ic *InvestmentCreate) SetPaymentMethod(s string) *InvestmentCreate {
	ic.mutation.SetPaymentMethod(s)
	return ic
}

// SetRemarks sets the "remarks" field.
func (ic *InvestmentCreate) SetRemarks(s string) *InvestmentCreate {
	ic.mutation.SetRemarks(s)
	return ic
}

// SetCreatedAt sets the "created_at" field.
func (ic *InvestmentCreate) SetCreatedAt(t time.Time) *InvestmentCreate {
	ic.mutation.SetCreatedAt(t)
	return ic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ic *InvestmentCreate) SetNillableCreatedAt(t *time.Time) *InvestmentCreate {
	if t != nil {
		ic.SetCreatedAt(*t)
	}
	return ic
}

// SetUpdatedAt sets the "updated_at" field.
func (ic *InvestmentCreate) SetUpdatedAt(t time.Time) *InvestmentCreate {
	ic.mutation.SetUpdatedAt(t)
	return ic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ic *InvestmentCreate) SetNillableUpdatedAt(t *time.Time) *InvestmentCreate {
	if t != nil {
		ic.SetUpdatedAt(*t)
	}
	return ic
}

// SetID sets the "id" field.
func (ic *InvestmentCreate) SetID(i int) *InvestmentCreate {
	ic.mutation.SetID(i)
	return ic
}

// SetInvestmentIDID sets the "investment_id" edge to the Portfolio entity by ID.
func (ic *InvestmentCreate) SetInvestmentIDID(id int) *InvestmentCreate {
	ic.mutation.SetInvestmentIDID(id)
	return ic
}

// SetNillableInvestmentIDID sets the "investment_id" edge to the Portfolio entity by ID if the given value is not nil.
func (ic *InvestmentCreate) SetNillableInvestmentIDID(id *int) *InvestmentCreate {
	if id != nil {
		ic = ic.SetInvestmentIDID(*id)
	}
	return ic
}

// SetInvestmentID sets the "investment_id" edge to the Portfolio entity.
func (ic *InvestmentCreate) SetInvestmentID(p *Portfolio) *InvestmentCreate {
	return ic.SetInvestmentIDID(p.ID)
}

// Mutation returns the InvestmentMutation object of the builder.
func (ic *InvestmentCreate) Mutation() *InvestmentMutation {
	return ic.mutation
}

// Save creates the Investment in the database.
func (ic *InvestmentCreate) Save(ctx context.Context) (*Investment, error) {
	var (
		err  error
		node *Investment
	)
	ic.defaults()
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InvestmentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			if node, err = ic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			if ic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Investment)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from InvestmentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InvestmentCreate) SaveX(ctx context.Context) *Investment {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ic *InvestmentCreate) Exec(ctx context.Context) error {
	_, err := ic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ic *InvestmentCreate) ExecX(ctx context.Context) {
	if err := ic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ic *InvestmentCreate) defaults() {
	if _, ok := ic.mutation.CreatedAt(); !ok {
		v := investment.DefaultCreatedAt()
		ic.mutation.SetCreatedAt(v)
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		v := investment.DefaultUpdatedAt()
		ic.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ic *InvestmentCreate) check() error {
	if _, ok := ic.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Investment.user_id"`)}
	}
	if _, ok := ic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Investment.name"`)}
	}
	if _, ok := ic.mutation.Relation(); !ok {
		return &ValidationError{Name: "relation", err: errors.New(`ent: missing required field "Investment.relation"`)}
	}
	if _, ok := ic.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Investment.date"`)}
	}
	if _, ok := ic.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Investment.amount"`)}
	}
	if _, ok := ic.mutation.PaymentMethod(); !ok {
		return &ValidationError{Name: "payment_method", err: errors.New(`ent: missing required field "Investment.payment_method"`)}
	}
	if _, ok := ic.mutation.Remarks(); !ok {
		return &ValidationError{Name: "remarks", err: errors.New(`ent: missing required field "Investment.remarks"`)}
	}
	if _, ok := ic.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Investment.created_at"`)}
	}
	if _, ok := ic.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Investment.updated_at"`)}
	}
	return nil
}

func (ic *InvestmentCreate) sqlSave(ctx context.Context) (*Investment, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (ic *InvestmentCreate) createSpec() (*Investment, *sqlgraph.CreateSpec) {
	var (
		_node = &Investment{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: investment.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: investment.FieldID,
			},
		}
	)
	if id, ok := ic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ic.mutation.UserID(); ok {
		_spec.SetField(investment.FieldUserID, field.TypeInt64, value)
		_node.UserID = value
	}
	if value, ok := ic.mutation.Name(); ok {
		_spec.SetField(investment.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ic.mutation.Relation(); ok {
		_spec.SetField(investment.FieldRelation, field.TypeString, value)
		_node.Relation = value
	}
	if value, ok := ic.mutation.Date(); ok {
		_spec.SetField(investment.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := ic.mutation.Amount(); ok {
		_spec.SetField(investment.FieldAmount, field.TypeInt64, value)
		_node.Amount = value
	}
	if value, ok := ic.mutation.PaymentMethod(); ok {
		_spec.SetField(investment.FieldPaymentMethod, field.TypeString, value)
		_node.PaymentMethod = &value
	}
	if value, ok := ic.mutation.Remarks(); ok {
		_spec.SetField(investment.FieldRemarks, field.TypeString, value)
		_node.Remarks = &value
	}
	if value, ok := ic.mutation.CreatedAt(); ok {
		_spec.SetField(investment.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ic.mutation.UpdatedAt(); ok {
		_spec.SetField(investment.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := ic.mutation.InvestmentIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   investment.InvestmentIDTable,
			Columns: []string{investment.InvestmentIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: portfolio.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.portfolio_investments = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InvestmentCreateBulk is the builder for creating many Investment entities in bulk.
type InvestmentCreateBulk struct {
	config
	builders []*InvestmentCreate
}

// Save creates the Investment entities in the database.
func (icb *InvestmentCreateBulk) Save(ctx context.Context) ([]*Investment, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*Investment, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InvestmentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *InvestmentCreateBulk) SaveX(ctx context.Context) []*Investment {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (icb *InvestmentCreateBulk) Exec(ctx context.Context) error {
	_, err := icb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (icb *InvestmentCreateBulk) ExecX(ctx context.Context) {
	if err := icb.Exec(ctx); err != nil {
		panic(err)
	}
}
