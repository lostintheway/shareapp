// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/investment"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/portfolio"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/predicate"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/transaction"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/user"
)

// PortfolioUpdate is the builder for updating Portfolio entities.
type PortfolioUpdate struct {
	config
	hooks    []Hook
	mutation *PortfolioMutation
}

// Where appends a list predicates to the PortfolioUpdate builder.
func (pu *PortfolioUpdate) Where(ps ...predicate.Portfolio) *PortfolioUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PortfolioUpdate) SetName(s string) *PortfolioUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetAdminName sets the "admin_name" field.
func (pu *PortfolioUpdate) SetAdminName(s string) *PortfolioUpdate {
	pu.mutation.SetAdminName(s)
	return pu
}

// SetDate sets the "date" field.
func (pu *PortfolioUpdate) SetDate(s string) *PortfolioUpdate {
	pu.mutation.SetDate(s)
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PortfolioUpdate) SetUpdatedAt(t time.Time) *PortfolioUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pu *PortfolioUpdate) SetNillableUpdatedAt(t *time.Time) *PortfolioUpdate {
	if t != nil {
		pu.SetUpdatedAt(*t)
	}
	return pu
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (pu *PortfolioUpdate) AddTransactionIDs(ids ...int) *PortfolioUpdate {
	pu.mutation.AddTransactionIDs(ids...)
	return pu
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (pu *PortfolioUpdate) AddTransactions(t ...*Transaction) *PortfolioUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.AddTransactionIDs(ids...)
}

// AddInvestmentIDs adds the "investments" edge to the Investment entity by IDs.
func (pu *PortfolioUpdate) AddInvestmentIDs(ids ...int) *PortfolioUpdate {
	pu.mutation.AddInvestmentIDs(ids...)
	return pu
}

// AddInvestments adds the "investments" edges to the Investment entity.
func (pu *PortfolioUpdate) AddInvestments(i ...*Investment) *PortfolioUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.AddInvestmentIDs(ids...)
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (pu *PortfolioUpdate) SetUserIDID(id int) *PortfolioUpdate {
	pu.mutation.SetUserIDID(id)
	return pu
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (pu *PortfolioUpdate) SetNillableUserIDID(id *int) *PortfolioUpdate {
	if id != nil {
		pu = pu.SetUserIDID(*id)
	}
	return pu
}

// SetUserID sets the "user_id" edge to the User entity.
func (pu *PortfolioUpdate) SetUserID(u *User) *PortfolioUpdate {
	return pu.SetUserIDID(u.ID)
}

// Mutation returns the PortfolioMutation object of the builder.
func (pu *PortfolioUpdate) Mutation() *PortfolioMutation {
	return pu.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (pu *PortfolioUpdate) ClearTransactions() *PortfolioUpdate {
	pu.mutation.ClearTransactions()
	return pu
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (pu *PortfolioUpdate) RemoveTransactionIDs(ids ...int) *PortfolioUpdate {
	pu.mutation.RemoveTransactionIDs(ids...)
	return pu
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (pu *PortfolioUpdate) RemoveTransactions(t ...*Transaction) *PortfolioUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pu.RemoveTransactionIDs(ids...)
}

// ClearInvestments clears all "investments" edges to the Investment entity.
func (pu *PortfolioUpdate) ClearInvestments() *PortfolioUpdate {
	pu.mutation.ClearInvestments()
	return pu
}

// RemoveInvestmentIDs removes the "investments" edge to Investment entities by IDs.
func (pu *PortfolioUpdate) RemoveInvestmentIDs(ids ...int) *PortfolioUpdate {
	pu.mutation.RemoveInvestmentIDs(ids...)
	return pu
}

// RemoveInvestments removes "investments" edges to Investment entities.
func (pu *PortfolioUpdate) RemoveInvestments(i ...*Investment) *PortfolioUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return pu.RemoveInvestmentIDs(ids...)
}

// ClearUserID clears the "user_id" edge to the User entity.
func (pu *PortfolioUpdate) ClearUserID() *PortfolioUpdate {
	pu.mutation.ClearUserID()
	return pu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PortfolioUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortfolioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PortfolioUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PortfolioUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PortfolioUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PortfolioUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portfolio.Table,
			Columns: portfolio.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portfolio.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(portfolio.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.AdminName(); ok {
		_spec.SetField(portfolio.FieldAdminName, field.TypeString, value)
	}
	if value, ok := pu.mutation.Date(); ok {
		_spec.SetField(portfolio.FieldDate, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(portfolio.FieldUpdatedAt, field.TypeTime, value)
	}
	if pu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !pu.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.InvestmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.InvestmentsTable,
			Columns: []string{portfolio.InvestmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: investment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.RemovedInvestmentsIDs(); len(nodes) > 0 && !pu.mutation.InvestmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.InvestmentsTable,
			Columns: []string{portfolio.InvestmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: investment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.InvestmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.InvestmentsTable,
			Columns: []string{portfolio.InvestmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: investment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pu.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserIDTable,
			Columns: []string{portfolio.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserIDTable,
			Columns: []string{portfolio.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PortfolioUpdateOne is the builder for updating a single Portfolio entity.
type PortfolioUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PortfolioMutation
}

// SetName sets the "name" field.
func (puo *PortfolioUpdateOne) SetName(s string) *PortfolioUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetAdminName sets the "admin_name" field.
func (puo *PortfolioUpdateOne) SetAdminName(s string) *PortfolioUpdateOne {
	puo.mutation.SetAdminName(s)
	return puo
}

// SetDate sets the "date" field.
func (puo *PortfolioUpdateOne) SetDate(s string) *PortfolioUpdateOne {
	puo.mutation.SetDate(s)
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PortfolioUpdateOne) SetUpdatedAt(t time.Time) *PortfolioUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (puo *PortfolioUpdateOne) SetNillableUpdatedAt(t *time.Time) *PortfolioUpdateOne {
	if t != nil {
		puo.SetUpdatedAt(*t)
	}
	return puo
}

// AddTransactionIDs adds the "transactions" edge to the Transaction entity by IDs.
func (puo *PortfolioUpdateOne) AddTransactionIDs(ids ...int) *PortfolioUpdateOne {
	puo.mutation.AddTransactionIDs(ids...)
	return puo
}

// AddTransactions adds the "transactions" edges to the Transaction entity.
func (puo *PortfolioUpdateOne) AddTransactions(t ...*Transaction) *PortfolioUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.AddTransactionIDs(ids...)
}

// AddInvestmentIDs adds the "investments" edge to the Investment entity by IDs.
func (puo *PortfolioUpdateOne) AddInvestmentIDs(ids ...int) *PortfolioUpdateOne {
	puo.mutation.AddInvestmentIDs(ids...)
	return puo
}

// AddInvestments adds the "investments" edges to the Investment entity.
func (puo *PortfolioUpdateOne) AddInvestments(i ...*Investment) *PortfolioUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.AddInvestmentIDs(ids...)
}

// SetUserIDID sets the "user_id" edge to the User entity by ID.
func (puo *PortfolioUpdateOne) SetUserIDID(id int) *PortfolioUpdateOne {
	puo.mutation.SetUserIDID(id)
	return puo
}

// SetNillableUserIDID sets the "user_id" edge to the User entity by ID if the given value is not nil.
func (puo *PortfolioUpdateOne) SetNillableUserIDID(id *int) *PortfolioUpdateOne {
	if id != nil {
		puo = puo.SetUserIDID(*id)
	}
	return puo
}

// SetUserID sets the "user_id" edge to the User entity.
func (puo *PortfolioUpdateOne) SetUserID(u *User) *PortfolioUpdateOne {
	return puo.SetUserIDID(u.ID)
}

// Mutation returns the PortfolioMutation object of the builder.
func (puo *PortfolioUpdateOne) Mutation() *PortfolioMutation {
	return puo.mutation
}

// ClearTransactions clears all "transactions" edges to the Transaction entity.
func (puo *PortfolioUpdateOne) ClearTransactions() *PortfolioUpdateOne {
	puo.mutation.ClearTransactions()
	return puo
}

// RemoveTransactionIDs removes the "transactions" edge to Transaction entities by IDs.
func (puo *PortfolioUpdateOne) RemoveTransactionIDs(ids ...int) *PortfolioUpdateOne {
	puo.mutation.RemoveTransactionIDs(ids...)
	return puo
}

// RemoveTransactions removes "transactions" edges to Transaction entities.
func (puo *PortfolioUpdateOne) RemoveTransactions(t ...*Transaction) *PortfolioUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return puo.RemoveTransactionIDs(ids...)
}

// ClearInvestments clears all "investments" edges to the Investment entity.
func (puo *PortfolioUpdateOne) ClearInvestments() *PortfolioUpdateOne {
	puo.mutation.ClearInvestments()
	return puo
}

// RemoveInvestmentIDs removes the "investments" edge to Investment entities by IDs.
func (puo *PortfolioUpdateOne) RemoveInvestmentIDs(ids ...int) *PortfolioUpdateOne {
	puo.mutation.RemoveInvestmentIDs(ids...)
	return puo
}

// RemoveInvestments removes "investments" edges to Investment entities.
func (puo *PortfolioUpdateOne) RemoveInvestments(i ...*Investment) *PortfolioUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return puo.RemoveInvestmentIDs(ids...)
}

// ClearUserID clears the "user_id" edge to the User entity.
func (puo *PortfolioUpdateOne) ClearUserID() *PortfolioUpdateOne {
	puo.mutation.ClearUserID()
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PortfolioUpdateOne) Select(field string, fields ...string) *PortfolioUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Portfolio entity.
func (puo *PortfolioUpdateOne) Save(ctx context.Context) (*Portfolio, error) {
	var (
		err  error
		node *Portfolio
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PortfolioMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, puo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Portfolio)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PortfolioMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PortfolioUpdateOne) SaveX(ctx context.Context) *Portfolio {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PortfolioUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PortfolioUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PortfolioUpdateOne) sqlSave(ctx context.Context) (_node *Portfolio, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   portfolio.Table,
			Columns: portfolio.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: portfolio.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Portfolio.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, portfolio.FieldID)
		for _, f := range fields {
			if !portfolio.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != portfolio.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(portfolio.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.AdminName(); ok {
		_spec.SetField(portfolio.FieldAdminName, field.TypeString, value)
	}
	if value, ok := puo.mutation.Date(); ok {
		_spec.SetField(portfolio.FieldDate, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(portfolio.FieldUpdatedAt, field.TypeTime, value)
	}
	if puo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedTransactionsIDs(); len(nodes) > 0 && !puo.mutation.TransactionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.TransactionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.TransactionsTable,
			Columns: []string{portfolio.TransactionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.InvestmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.InvestmentsTable,
			Columns: []string{portfolio.InvestmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: investment.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.RemovedInvestmentsIDs(); len(nodes) > 0 && !puo.mutation.InvestmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.InvestmentsTable,
			Columns: []string{portfolio.InvestmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: investment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.InvestmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   portfolio.InvestmentsTable,
			Columns: []string{portfolio.InvestmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: investment.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if puo.mutation.UserIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserIDTable,
			Columns: []string{portfolio.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.UserIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   portfolio.UserIDTable,
			Columns: []string{portfolio.UserIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Portfolio{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{portfolio.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
