// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/migrate"

	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/investment"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/portfolio"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/transaction"
	"github.com/lostintheway/shareapp/tree/shareapp_go_ent/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Investment is the client for interacting with the Investment builders.
	Investment *InvestmentClient
	// Portfolio is the client for interacting with the Portfolio builders.
	Portfolio *PortfolioClient
	// Transaction is the client for interacting with the Transaction builders.
	Transaction *TransactionClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Investment = NewInvestmentClient(c.config)
	c.Portfolio = NewPortfolioClient(c.config)
	c.Transaction = NewTransactionClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Investment:  NewInvestmentClient(cfg),
		Portfolio:   NewPortfolioClient(cfg),
		Transaction: NewTransactionClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Investment:  NewInvestmentClient(cfg),
		Portfolio:   NewPortfolioClient(cfg),
		Transaction: NewTransactionClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Investment.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Investment.Use(hooks...)
	c.Portfolio.Use(hooks...)
	c.Transaction.Use(hooks...)
	c.User.Use(hooks...)
}

// InvestmentClient is a client for the Investment schema.
type InvestmentClient struct {
	config
}

// NewInvestmentClient returns a client for the Investment from the given config.
func NewInvestmentClient(c config) *InvestmentClient {
	return &InvestmentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `investment.Hooks(f(g(h())))`.
func (c *InvestmentClient) Use(hooks ...Hook) {
	c.hooks.Investment = append(c.hooks.Investment, hooks...)
}

// Create returns a builder for creating a Investment entity.
func (c *InvestmentClient) Create() *InvestmentCreate {
	mutation := newInvestmentMutation(c.config, OpCreate)
	return &InvestmentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Investment entities.
func (c *InvestmentClient) CreateBulk(builders ...*InvestmentCreate) *InvestmentCreateBulk {
	return &InvestmentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Investment.
func (c *InvestmentClient) Update() *InvestmentUpdate {
	mutation := newInvestmentMutation(c.config, OpUpdate)
	return &InvestmentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InvestmentClient) UpdateOne(i *Investment) *InvestmentUpdateOne {
	mutation := newInvestmentMutation(c.config, OpUpdateOne, withInvestment(i))
	return &InvestmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InvestmentClient) UpdateOneID(id int) *InvestmentUpdateOne {
	mutation := newInvestmentMutation(c.config, OpUpdateOne, withInvestmentID(id))
	return &InvestmentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Investment.
func (c *InvestmentClient) Delete() *InvestmentDelete {
	mutation := newInvestmentMutation(c.config, OpDelete)
	return &InvestmentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InvestmentClient) DeleteOne(i *Investment) *InvestmentDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InvestmentClient) DeleteOneID(id int) *InvestmentDeleteOne {
	builder := c.Delete().Where(investment.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InvestmentDeleteOne{builder}
}

// Query returns a query builder for Investment.
func (c *InvestmentClient) Query() *InvestmentQuery {
	return &InvestmentQuery{
		config: c.config,
	}
}

// Get returns a Investment entity by its id.
func (c *InvestmentClient) Get(ctx context.Context, id int) (*Investment, error) {
	return c.Query().Where(investment.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InvestmentClient) GetX(ctx context.Context, id int) *Investment {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryInvestmentID queries the investment_id edge of a Investment.
func (c *InvestmentClient) QueryInvestmentID(i *Investment) *PortfolioQuery {
	query := &PortfolioQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(investment.Table, investment.FieldID, id),
			sqlgraph.To(portfolio.Table, portfolio.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, investment.InvestmentIDTable, investment.InvestmentIDColumn),
		)
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InvestmentClient) Hooks() []Hook {
	return c.hooks.Investment
}

// PortfolioClient is a client for the Portfolio schema.
type PortfolioClient struct {
	config
}

// NewPortfolioClient returns a client for the Portfolio from the given config.
func NewPortfolioClient(c config) *PortfolioClient {
	return &PortfolioClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `portfolio.Hooks(f(g(h())))`.
func (c *PortfolioClient) Use(hooks ...Hook) {
	c.hooks.Portfolio = append(c.hooks.Portfolio, hooks...)
}

// Create returns a builder for creating a Portfolio entity.
func (c *PortfolioClient) Create() *PortfolioCreate {
	mutation := newPortfolioMutation(c.config, OpCreate)
	return &PortfolioCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Portfolio entities.
func (c *PortfolioClient) CreateBulk(builders ...*PortfolioCreate) *PortfolioCreateBulk {
	return &PortfolioCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Portfolio.
func (c *PortfolioClient) Update() *PortfolioUpdate {
	mutation := newPortfolioMutation(c.config, OpUpdate)
	return &PortfolioUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PortfolioClient) UpdateOne(po *Portfolio) *PortfolioUpdateOne {
	mutation := newPortfolioMutation(c.config, OpUpdateOne, withPortfolio(po))
	return &PortfolioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PortfolioClient) UpdateOneID(id int) *PortfolioUpdateOne {
	mutation := newPortfolioMutation(c.config, OpUpdateOne, withPortfolioID(id))
	return &PortfolioUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Portfolio.
func (c *PortfolioClient) Delete() *PortfolioDelete {
	mutation := newPortfolioMutation(c.config, OpDelete)
	return &PortfolioDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PortfolioClient) DeleteOne(po *Portfolio) *PortfolioDeleteOne {
	return c.DeleteOneID(po.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PortfolioClient) DeleteOneID(id int) *PortfolioDeleteOne {
	builder := c.Delete().Where(portfolio.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PortfolioDeleteOne{builder}
}

// Query returns a query builder for Portfolio.
func (c *PortfolioClient) Query() *PortfolioQuery {
	return &PortfolioQuery{
		config: c.config,
	}
}

// Get returns a Portfolio entity by its id.
func (c *PortfolioClient) Get(ctx context.Context, id int) (*Portfolio, error) {
	return c.Query().Where(portfolio.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PortfolioClient) GetX(ctx context.Context, id int) *Portfolio {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryTransactions queries the transactions edge of a Portfolio.
func (c *PortfolioClient) QueryTransactions(po *Portfolio) *TransactionQuery {
	query := &TransactionQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portfolio.Table, portfolio.FieldID, id),
			sqlgraph.To(transaction.Table, transaction.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, portfolio.TransactionsTable, portfolio.TransactionsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryInvestments queries the investments edge of a Portfolio.
func (c *PortfolioClient) QueryInvestments(po *Portfolio) *InvestmentQuery {
	query := &InvestmentQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portfolio.Table, portfolio.FieldID, id),
			sqlgraph.To(investment.Table, investment.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, portfolio.InvestmentsTable, portfolio.InvestmentsColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUserID queries the user_id edge of a Portfolio.
func (c *PortfolioClient) QueryUserID(po *Portfolio) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := po.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(portfolio.Table, portfolio.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, portfolio.UserIDTable, portfolio.UserIDColumn),
		)
		fromV = sqlgraph.Neighbors(po.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PortfolioClient) Hooks() []Hook {
	return c.hooks.Portfolio
}

// TransactionClient is a client for the Transaction schema.
type TransactionClient struct {
	config
}

// NewTransactionClient returns a client for the Transaction from the given config.
func NewTransactionClient(c config) *TransactionClient {
	return &TransactionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `transaction.Hooks(f(g(h())))`.
func (c *TransactionClient) Use(hooks ...Hook) {
	c.hooks.Transaction = append(c.hooks.Transaction, hooks...)
}

// Create returns a builder for creating a Transaction entity.
func (c *TransactionClient) Create() *TransactionCreate {
	mutation := newTransactionMutation(c.config, OpCreate)
	return &TransactionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Transaction entities.
func (c *TransactionClient) CreateBulk(builders ...*TransactionCreate) *TransactionCreateBulk {
	return &TransactionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Transaction.
func (c *TransactionClient) Update() *TransactionUpdate {
	mutation := newTransactionMutation(c.config, OpUpdate)
	return &TransactionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TransactionClient) UpdateOne(t *Transaction) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransaction(t))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TransactionClient) UpdateOneID(id int) *TransactionUpdateOne {
	mutation := newTransactionMutation(c.config, OpUpdateOne, withTransactionID(id))
	return &TransactionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Transaction.
func (c *TransactionClient) Delete() *TransactionDelete {
	mutation := newTransactionMutation(c.config, OpDelete)
	return &TransactionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TransactionClient) DeleteOne(t *Transaction) *TransactionDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *TransactionClient) DeleteOneID(id int) *TransactionDeleteOne {
	builder := c.Delete().Where(transaction.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TransactionDeleteOne{builder}
}

// Query returns a query builder for Transaction.
func (c *TransactionClient) Query() *TransactionQuery {
	return &TransactionQuery{
		config: c.config,
	}
}

// Get returns a Transaction entity by its id.
func (c *TransactionClient) Get(ctx context.Context, id int) (*Transaction, error) {
	return c.Query().Where(transaction.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TransactionClient) GetX(ctx context.Context, id int) *Transaction {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPfID queries the pf_id edge of a Transaction.
func (c *TransactionClient) QueryPfID(t *Transaction) *PortfolioQuery {
	query := &PortfolioQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(transaction.Table, transaction.FieldID, id),
			sqlgraph.To(portfolio.Table, portfolio.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, transaction.PfIDTable, transaction.PfIDColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TransactionClient) Hooks() []Hook {
	return c.hooks.Transaction
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryPortfolios queries the portfolios edge of a User.
func (c *UserClient) QueryPortfolios(u *User) *PortfolioQuery {
	query := &PortfolioQuery{config: c.config}
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(portfolio.Table, portfolio.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PortfoliosTable, user.PortfoliosColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
